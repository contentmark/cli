name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        # Remove cache until package-lock.json is committed
    
    - name: Install dependencies
      run: npm ci --prefer-offline || npm install
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests
      run: npm test
    
    - name: Build
      run: npm run build
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: contentmark-cli
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    
    - name: Install dependencies
      run: npm ci --prefer-offline || npm install
    
    - name: Build package
      run: npm run build
    
    - name: Test CLI installation
      run: |
        npm pack
        npm install -g contentmark-cli-*.tgz
        contentmark --version
        contentmark info
    
    - name: Test CLI commands
      run: |
        # Test generation
        contentmark generate --type blog --output test-manifest.json
        
        # Test validation
        contentmark validate test-manifest.json
        
        # Test with verbose output
        contentmark validate test-manifest.json --verbose
        
        # Test JSON output
        contentmark validate test-manifest.json --json
        
        # Test init command
        mkdir test-project
        cd test-project
        contentmark init
        contentmark validate .well-known/contentmark.json
    
    - name: Test website checking
      run: |
        # Test check command (using a real site or mock)
        contentmark check contentmark.org || true  # Allow failure for demo

  publish:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci --prefer-offline || npm install
    
    - name: Build
      run: npm run build
    
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub Release Assets
      run: |
        npm pack
        mv contentmark-cli-*.tgz contentmark-cli.tgz
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./contentmark-cli.tgz
        asset_name: contentmark-cli.tgz
        asset_content_type: application/gzip

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level high || echo "Audit found issues but continuing..."
    
    - name: Check for known vulnerabilities
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    
    - run: |
        npm ci --prefer-offline || npm install
        npx audit-ci --config audit-ci.json || echo "Audit CI completed with warnings"
